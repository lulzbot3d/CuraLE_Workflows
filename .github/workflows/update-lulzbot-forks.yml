name: Update LulzBot Forks

on:

  workflow_call:
    inputs:
      repo:
        description: 'UltiMaker repository'
        required: true
        type: string
        default: 'Cura'

      branch:
        description: 'Branch of UltiMaker repository to pull from'
        required: false
        type: string
        default: 'main'

  # schedule:
    # Runs at 7:00 CST on Mondays, Wednesdays, and Fridays
    # - cron: '0 13 * * 1,3,5'

permissions:
  contents: read

jobs:
  update-lulzbot-forks:
    name: Upload package recipe
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     repos:
    #       - fork: Conan_LulzBot_Config
    #         ulti: conan-config
    #         branch: master
    #       - fork: Conan_LulzBot_Index
    #         ulti: conan-ultimaker-index
    #         branch: main

    #       - fork: CuraEngineLE
    #         ulti: CuraEngine
    #         branch: main
    #       - fork: CuraEngineLE_Benchmarks
    #         ulti: CuraEngineBenchmarks
    #         branch: main
    #       - fork: CuraEngineLE_gRPC_Definitions
    #         ulti: CuraEngine_grpc_definitions
    #         branch: main
    #       - fork: CuraEngineLE_Plugin_Infill_Generate
    #         ulti: CuraEngine_plugin_infill_generate
    #         branch: main

    #       - fork: CuraLE
    #         ulti: Cura
    #         branch: main
    #       - fork: CuraLE_Binary_Data
    #         ulti: cura-binary-data
    #         branch: main
    #       - fork: CuraLE_Workflows
    #         ulti: cura-workflows
    #         branch: main
    #       - fork: FDM_MaterialsLE
    #         ulti: fdm_materials
    #         branch: master

    #       - fork: libArcusLE
    #         ulti: libArcus
    #         branch: main
    #       - fork: libCharonLE
    #         ulti: libCharon
    #         branch: master/s-line
    #       - fork: libnest2dLE
    #         ulti: libnest2d
    #         branch: main
    #       - fork: libSavitarLE
    #         ulti: libSavitar
    #         branch: main

    #       - fork: pyArcusLE
    #         ulti: pyArcus
    #         branch: main
    #       - fork: pynest2dLE
    #         ulti: pynest2d
    #         branch: main
    #       - fork: pySavitarLE
    #         ulti: pySavitar
    #         branch: main

    #       - fork: ScriptaLE
    #         ulti: Scripta_public
    #         branch: main
    #       - fork: SynsepalumDulcificumLE
    #         ulti: synsepalum_dulcificum
    #         branch: main

    #       - fork: UraniumLE
    #         ulti: Uranium
    #         branch: main
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: 'ulti-main'

      - name: Pull (Fast-Forward) upstream changes
        id: sync
        run: |
          git remote add ulti https://github.com/Ultimaker/${{ inputs.repo }}.git
          git fetch ulti

          # Check for new commits
          ULTI_HASH=$(git rev-parse "ulti/${{ inputs.branch }}")
          git fetch origin ulti-main

          if [ -z "${ULTI_HASH}"]; then
            echo "Error fetching upstream hash."
          elif [ "$(git branch "ulti-main" --contains="${ULTI_HASH}")" ]; then
            echo "No new commits."
          else

            git pull --no-edit --ff-only ulti "${{ inputs.branch }}"
            git push origin ulti-main
            CS=$?

            if [ "${CS}" -ne 0 ]; then
              echo "Error pushing to origin."
            fi
          fi
